plugins {
    id "org.sonarqube" version "3.0"
    id "com.jfrog.bintray" version "1.8.5"
    id "com.jfrog.artifactory" version "4.18.3"
    id "me.champeau.gradle.jmh" version "0.5.3"
    id 'org.asciidoctor.convert' version '1.6.0'
    id 'idea'
    id 'io.freefair.aspectj' version '8.0.1'
}

ext {
    releaseVersion = '1.0.0'
}

apply from: "${rootDir}/libraries.gradle"

allprojects {
    apply plugin: 'jacoco'

    version = '1.0.0-SNAPSHOT'
    group = 'io.test.gear4test'
    description = 'Gear4jTest'

    repositories {
        jcenter()
        mavenCentral()
    }
}

artifactoryPublish.skip = true // apply to all projects except the root

ext {
    coreProjects = subprojects
}

configure(project.coreProjects) {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'io.freefair.aspectj'
    
    
    dependencies {
        implementation(libraries.slf4j)
        implementation(libraries.cglib)
        implementation(libraries.aspectjrt)
//        implementation(libraries.aspectjweaver)
        
        //compileOnly(libraries.mojo)

        testImplementation(libraries.junit)
        testImplementation(libraries.assertj)
        testImplementation(libraries.logback)
        testImplementation(libraries.mockito)
        testImplementation(libraries.mockitoJunit)
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:unchecked", "-parameters"]
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
    
    afterEvaluate {
        jar {
            inputs.property('moduleName', moduleName)
            manifest.attributes(
                    'Automatic-Module-Name': moduleName
            )
        }
    }
}

def allTestCoverageFile = "${rootProject.projectDir}/build/reports/jacoco/report.xml"

//task jacocoMergeTest(type: JacocoReport) {
//    destinationFile = file(allTestCoverageFile)
//    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
//}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "gear4jtest"
        property "sonar.projectName", "gear4jtest"
        property "sonar.projectKey", "gear4jtest_gear4jtest"
        property "sonar.links.homepage", "https://github.com/gear4jtest/gear4jtest"
        property "sonar.links.ci", "https://travis-ci.org/gear4jtest/gear4jtest"
        property "sonar.links.scm", "https://github.com/gear4jtest/gear4jtest"
        property "sonar.links.issue", "https://github.com/gear4jtest/gear4jtest/issues"
        property "sonar.language", "java"
        property "sonar.coverage.jacoco.xmlReportPaths", allTestCoverageFile
    }
}

task jacocoRootTestReport(type: JacocoReport) {

    coreProjects.each { dependsOn("${it.name}:test") }
    coreProjects.each { dependsOn("${it.name}:jacocoTestReport") }

    additionalSourceDirs.from = coreProjects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = coreProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = coreProjects.sourceSets.main.output
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

    onlyIf {
        true
    }

    reports {
        xml.required = true
        xml.destination file(allTestCoverageFile)
        html.required = true
        csv.required = false
    }
}

tasks.check.dependsOn tasks.jacocoRootTestReport
tasks.jacocoRootTestReport.dependsOn tasks.test
